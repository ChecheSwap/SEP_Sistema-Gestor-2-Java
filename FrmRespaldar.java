/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sep;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author GermyMc
 */
public class FrmRespaldar extends javax.swing.JFrame {

    String full_pathExportar;
    String full_pathImportar;

    /**
     * Creates new form FrmRespaldar
     */
    public FrmRespaldar() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelExportar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldExportar = new javax.swing.JTextField();
        jButtonExplorarExportar = new javax.swing.JButton();
        jButtonExportar = new javax.swing.JButton();
        jPanelImportar = new javax.swing.JPanel();
        jLabelFrmDirectorio = new javax.swing.JLabel();
        jTextFieldImportar = new javax.swing.JTextField();
        jButtonExplorarImportar = new javax.swing.JButton();
        jButtonImportar = new javax.swing.JButton();
        jLabelLogo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Respaldar Base de Datos");

        jPanelExportar.setBorder(javax.swing.BorderFactory.createTitledBorder("Exportar BD"));

        jLabel1.setText("Directorio:");

        jButtonExplorarExportar.setText("...");
        jButtonExplorarExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExplorarExportarActionPerformed(evt);
            }
        });

        jButtonExportar.setText("Exportar");
        jButtonExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelExportarLayout = new javax.swing.GroupLayout(jPanelExportar);
        jPanelExportar.setLayout(jPanelExportarLayout);
        jPanelExportarLayout.setHorizontalGroup(
            jPanelExportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExportarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelExportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonExportar)
                    .addGroup(jPanelExportarLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExplorarExportar)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanelExportarLayout.setVerticalGroup(
            jPanelExportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExportarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelExportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldExportar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonExplorarExportar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExportar)
                .addContainerGap())
        );

        jPanelImportar.setBorder(javax.swing.BorderFactory.createTitledBorder("Importar DB"));
        jPanelImportar.setToolTipText("");

        jLabelFrmDirectorio.setText("Directorio:");

        jButtonExplorarImportar.setText("...");
        jButtonExplorarImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExplorarImportarImportarActionPerformed(evt);
            }
        });

        jButtonImportar.setText("Importar");
        jButtonImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelImportarLayout = new javax.swing.GroupLayout(jPanelImportar);
        jPanelImportar.setLayout(jPanelImportarLayout);
        jPanelImportarLayout.setHorizontalGroup(
            jPanelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelImportarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonImportar)
                    .addGroup(jPanelImportarLayout.createSequentialGroup()
                        .addComponent(jLabelFrmDirectorio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExplorarImportar)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanelImportarLayout.setVerticalGroup(
            jPanelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelImportarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldImportar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFrmDirectorio)
                    .addComponent(jButtonExplorarImportar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonImportar)
                .addContainerGap())
        );

        jLabelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logoSEP.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelExportar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanelImportar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelLogo)
                                .addGap(138, 138, 138))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabelLogo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExplorarImportarImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExplorarImportarImportarActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Especifique un directorio para guardar el respaldo");
        fileChooser.setSelectedFile(new File("BD.sql"));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Base de Datos SQL Docentes", "sql");
        fileChooser.setFileFilter(filter);
        int userSelection = fileChooser.showOpenDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            String file_name = archivo.getName();
            String file_path = archivo.getParent();
            full_pathImportar = file_path.concat("\\").concat(file_name);
            jTextFieldImportar.setText(full_pathImportar);

        }

    }//GEN-LAST:event_jButtonExplorarImportarImportarActionPerformed

    private void jButtonExplorarExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExplorarExportarActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Especifique un directorio para guardar la Base de Datos");
        fileChooser.setSelectedFile(new File("BD.sql"));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Base de Datos SQL Docentes", "sql");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            String file_name = archivo.getName();
            String file_path = archivo.getParent();
            full_pathExportar = file_path.concat("\\").concat(file_name);
            jTextFieldExportar.setText(full_pathExportar);
            System.out.println(full_pathExportar);
        }
    }//GEN-LAST:event_jButtonExplorarExportarActionPerformed

    private void jButtonExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportarActionPerformed
        String ruta = jTextFieldExportar.getText();
        if (!"".equals(ruta) && ruta != null) {
            exportarDB("sep", "root", "master", ruta);
        } else {
            JOptionPane.showMessageDialog(this, "Especifique el directorio para guardar el respaldo", "Respaldar base de Datos", JOptionPane.WARNING_MESSAGE);
            jTextFieldExportar.requestFocus();
        }
    }//GEN-LAST:event_jButtonExportarActionPerformed

    private void jButtonImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportarActionPerformed
        String ruta = jTextFieldImportar.getText();
        if (!"".equals(ruta) && ruta != null) {
            importarDB("root", "developermcg", "sep", full_pathImportar);
            System.out.println(full_pathImportar);
        } else {
            JOptionPane.showMessageDialog(this, "Especifique el directorio para importar la base de datos", "Respaldar base de Datos", JOptionPane.WARNING_MESSAGE);
            jTextFieldExportar.requestFocus();
        }
    }//GEN-LAST:event_jButtonImportarActionPerformed

    public boolean exportarDB(String dbName, String dbUserName, String dbPassword, String path) {
        String executeCmd = "C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqldump.exe -u " + dbUserName + " -p" + dbPassword + " --add-drop-database -B " + dbName + " -r " + path;
        Process runtimeProcess;
        try {

            runtimeProcess = Runtime.getRuntime().exec(executeCmd);
            int processComplete = runtimeProcess.waitFor();

            if (processComplete == 0) {
                JOptionPane.showMessageDialog(this, "Respaldo creado correctamente", "Respaldar base de Datos", JOptionPane.INFORMATION_MESSAGE);
                return true;
            } else {
                JOptionPane.showMessageDialog(this, "No ha sido posible crear el respaldo", "Error al Respaldar base de Datos", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return false;

    }

    public boolean importarDB(String dbName, String dbUserName, String dbPassword, String source) {
        String[] executeCmd = new String[]{"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqldump.exe", "--user=" + dbUserName, "--password=" + dbPassword, "-e", "source " + source};

        Process runtimeProcess;
        try {

            runtimeProcess = Runtime.getRuntime().exec(executeCmd);
            int processComplete = runtimeProcess.waitFor();

            if (processComplete == 0) {
                System.out.println("Backup restored successfully");
                return true;
            } else {
                JOptionPane.showMessageDialog(this, "Base de Datos Importada correctamente", "Respaldar base de Datos", JOptionPane.INFORMATION_MESSAGE);

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmRespaldar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmRespaldar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmRespaldar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmRespaldar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmRespaldar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExplorarExportar;
    private javax.swing.JButton jButtonExplorarImportar;
    private javax.swing.JButton jButtonExportar;
    private javax.swing.JButton jButtonImportar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelFrmDirectorio;
    private javax.swing.JLabel jLabelLogo;
    private javax.swing.JPanel jPanelExportar;
    private javax.swing.JPanel jPanelImportar;
    private javax.swing.JTextField jTextFieldExportar;
    private javax.swing.JTextField jTextFieldImportar;
    // End of variables declaration//GEN-END:variables
}
